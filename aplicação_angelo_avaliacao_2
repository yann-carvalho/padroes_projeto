Aplicação Usando o Padrão Strategy



from abc import ABC, abstractmethod
import requests

# Interface da estratégia
class EstrategiaTemperatura(ABC):
    @abstractmethod
    def obter_temperatura(self, cidade: str) -> float:
        pass

# Implementação concreta da estratégia usando OpenWeatherMap
class EstrategiaOpenWeatherMap(EstrategiaTemperatura):
    def __init__(self, api_key: str):
        self.api_key = api_key

    def obter_temperatura(self, cidade: str) -> float:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={cidade}&appid={self.api_key}&units=metric"
        response = requests.get(url)
        data = response.json()

        if response.status_code == 200:
            temperatura = data['main']['temp']
            return temperatura
        else:
            print(f"Erro ao obter dados da cidade {cidade}: {data.get('message', 'Erro desconhecido')}")
            exit()

# Contexto que utiliza a estratégia de obtenção de temperatura
class ServicoDeTemperatura:
    def __init__(self, estrategia: EstrategiaTemperatura):
        self.estrategia = estrategia

    def definir_estrategia(self, estrategia: EstrategiaTemperatura):
        self.estrategia = estrategia

    def obter_temperatura(self, cidade: str) -> float:
        return self.estrategia.obter_temperatura(cidade)

if __name__ == "__main__":
    api_key = "f50240869ab9e8c2545f6c41145d54d2"  # Substitua por sua chave de API da OpenWeatherMap

    # Cria a estratégia com a chave de API
    estrategia = EstrategiaOpenWeatherMap(api_key)

    # Cria o serviço de temperatura com a estratégia
    servico = ServicoDeTemperatura(estrategia)

    cidade = input("Digite o nome da cidade para obter a temperatura: ")
    temperatura = servico.obter_temperatura(cidade)
    print(f"A temperatura atual em {cidade} é {temperatura:.1f}°C")
    
    

Características do Padrão Strategy na Aplicação

    Intercambiabilidade:
        O padrão Strategy permite a intercambiabilidade de diferentes estratégias de obtenção de temperatura. Você pode facilmente adicionar novas estratégias (por exemplo, usando outra API de clima) sem alterar o código existente.

    Encapsulamento de Algoritmos:
        Cada estratégia encapsula um algoritmo específico para obter a temperatura. No nosso exemplo, usamos a EstrategiaOpenWeatherMap.

    Flexibilidade:
        O contexto (ServicoDeTemperatura) usa a estratégia fornecida e pode mudar a estratégia dinamicamente se necessário.

Este design torna o código mais flexível e extensível, seguindo os princípios do padrão Strategy.

